version: 2.1

orbs:
  slack: circleci/slack@4.1

commands:
  install_awscli:
    description: Install AWS CLI v2 
    steps:
      - run:
          name: Install AWS CLI v2  
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install_ansible:
    description: Install Ansible
    steps:
      - run: 
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
  install_nodejs:
    description: install Node.js 13
    steps:
    - run:
        name: Install Node.js 13
        command: |
          curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
          sudo apt install -y nodejs
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID. 
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            pip install awscli
            if [[ "$(aws s3 ls)" =~ "udapeople-my920252436563bucket" ]]
            then
                aws s3 rm s3://udapeople-my920252436563bucket/*
                aws s3 rb s3://udapeople-my920252436563bucket
            else
                echo "The bucket is already deleted"
            fi
            if [[ "$(aws s3 ls)" =~ "udapeople-${<< parameters.workflow_id >>}" ]]
            then
                aws s3 rm s3://udapeople-${<< parameters.workflow_id >>}/*
                aws s3 rb s3://udapeople-${<< parameters.workflow_id >>}
            else
                echo "The bucket is already deleted"
            fi
            echo "Waiting for the buckets to be deleted ..."
            sleep 15
            echo "S3 BUCKET DESTRUCTION DONE SUCCEESSFULLY !"
            aws cloudformation delete-stack --stack-name myStack-${<< parameters.workflow_id >>}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${<< parameters.workflow_id >>}
            aws cloudformation delete-stack --stack-name udapeople-backend-${<< parameters.workflow_id >>}
            echo "CLOUDFORMATION DESTRUCTION DONE SUCCEESSFULLY !"
  revert-migrations:
    description: Revert the last migration with the given workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/EB2xwfdGievAbEN38Tj81k/migration_${<< parameters.workflow_id >>})
            echo ${SUCCESS}
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi 
            echo "MIGRATION NOT REVERTED"
  notify-slack:
    description: Notify on slack everytime a job fails  
    steps:
      - slack/notify:
          channel: 'C04C9DU1SJ3'
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*Critical Job FAILED !!! *",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: fail

workflows:
  default:
    jobs:
      - deploy-frontend
      - deploy-backend
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
            
nodeImage:  &nodeImage
  docker:
      - image: circleci/node:13.8.0
      
amazonImage:  &amazonImage
  docker:
      - image: amazon/aws-cli
      
ansibleImage:  &ansibleImage
  docker:
      - image: python:3.7-alpine3.11
      
alpineImage:  &alpineImage
  docker:
      - image: alpine:latest
      
curlImage:  &curlImage
  docker:
      - image: cimg/node:19.3.0

pythonImage:  &pythonImage
  docker:
      - image: cimg/python:3.11.1

pynodeImage:  &pynodeImage
  docker:
      - image: cimg/python:3.11.1-node
      
baseImage:  &baseImage
  docker:
      - image: cimg/base:2021.04

jobs:
  Initiate-aws:
    <<: *amazonImage
    steps:
      - checkout
      - run:
          name: Initiate s3 buckets 
          command: |
            if [[ "$(aws s3 ls)" ]]
            then 
                echo "There is aws s3 bucket already!"
                echo "Instantiation Succeeded ..."
            else 
                echo "No s3 bucket found"
                echo "Creating one for you ..."
                echo "Instantiation began ..."
                aws s3api create-bucket --bucket udapeople-my920252436563bucket
                echo "Creating cloudfront for your bucket"
                cd .circleci/files
                aws cloudformation deploy \
                          --template-file cloudfront.yml \
                          --stack-name InitialStack\
                          --parameter-overrides WorkflowID=udapeople-my920252436563bucket
                echo "Instantiation Succeeded ..."
            fi
  build-frontend:
    <<: *nodeImage
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    <<: *nodeImage
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    <<: *nodeImage
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test
  test-backend:
    <<: *nodeImage
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
    <<: *nodeImage
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end scan
          command: |
            cd frontend
            npm install
            npm audit fix --force
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            # npm install oauth-sign@^0.9.0
            # npm audit --audit-level=critical
  scan-backend:
    <<: *nodeImage
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm install
            npm audit fix --force
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            # npm install oauth-sign@^0.9.0
            # npm audit --audit-level=critical
  deploy-infrastructure:
    <<: *amazonImage
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum -y install tar gzip
      - run:
          name: Deploy Backend Infrastructure
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Deploy Frontend Infrastructure
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Extract IP Adresses
          command: |
            aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text >> kvdb.txt
      - run:
          name: Save Ip Address to KVDB
          command: |
            curl  -d $(cat kvdb.txt) https://kvdb.io/EB2xwfdGievAbEN38Tj81k/PublicIpAddress_i
      - destroy-environment:
          workflow_id: "CIRCLE_WORKFLOW_ID:0:7"
  configure-infrastructure:
    <<: *ansibleImage
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["51:37:ad:d9:41:ca:0b:34:5f:da:d7:ec:62:1a:b9:e8"]
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for curl kvdb
            apk update
            apk upgrade
            apk search curl
            apk add curl
            # install the dependencies needed for your playbook
            apk add --update ansible
            # install the dependencies needed for your aws cli
            pip install --upgrade pip
            pip install awscli
            apk add ansible
            # install the dependencies needed for your openssh
            apk search openssh
            apk add openssh
      - run:
          name: Retrieve Ip Address from KVDB
          command: |
            curl  -s https://kvdb.io/EB2xwfdGievAbEN38Tj81k/PublicIpAddress_i >> ./.circleci/ansible/inventory.txt
      - run:
          name: Check inventory file
          command: |
            cat .circleci/ansible/inventory.txt
            ls .circleci/ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible/
            ansible-playbook configure-server.yml -i inventory.txt
      - destroy-environment:
          workflow_id: "CIRCLE_WORKFLOW_ID:0:7"
  run-migrations:
    <<: *curlImage
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send database migration status to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              sudo apt install curl -y
              curl https://kvdb.io/EB2xwfdGievAbEN38Tj81k/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
      - destroy-environment:
          workflow_id: "CIRCLE_WORKFLOW_ID:0:7"
  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "API_URL = ${API_URL}"
            echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
  deploy-backend:
    docker:
      - image: cimg/node:13.8.0 
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - install_nodejs
      - add_ssh_keys:
          fingerprints: ["51:37:ad:d9:41:ca:0b:34:5f:da:d7:ec:62:1a:b9:e8"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-deps]    
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Retrieve Ip Address from KVDB
          command: |
            curl  -s https://kvdb.io/EB2xwfdGievAbEN38Tj81k/PublicIpAddress_i >> ./.circleci/ansible/inventory.txt
      - run:
          name: Package Backend
          command: |
            cd backend
            npm run build
            tar -czvf artifact.tar.gz dist/* package*
            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
  smoke-test:
    <<: *ansibleImage 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for curl
            apk update
            apk upgrade
            apk search curl
            apk add curl
            # install the dependencies needed for your aws cli
            pip install --upgrade pip
            pip install awscli
            apk add ansible
            # install the dependencies for node and npm
            apk update
            apk add --update nodejs npm nodejs-npm
      - run:
          name: Get backend url
          command: |
            curl  -s https://kvdb.io/EB2xwfdGievAbEN38Tj81k/PublicIpAddress_i > BACKEND_IP_ADD.txt
            BACKEND_IP_SMOKE=$(cat BACKEND_IP_ADD.txt)
            export BACKEND_URL_SMOKE="${BACKEND_IP_SMOKE}:3030/api/status"
            echo $BACKEND_URL_SMOKE
      - run:
          name: Backend smoke test.
          command: |
            curl  -s "https://${BACKEND_URL_SMOKE}" > backend.reponse
            curl  -sI "https://${BACKEND_URL_SMOKE}" > backend.status
            cat backend.status backend.reponse
            if [[ "$(cat backend.reponse)" =~ "ok" ]]
            then
                echo "It Worked!"
                return 0
            else
                echo "!!! It failed!"
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_URL_SMOKE="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${FRONTEND_URL_SMOKE}
            curl  -s "${FRONTEND_URL_SMOKE}" > frontend.reponse
            curl  -sI "${FRONTEND_URL_SMOKE}" > frontend.status
            cat frontend.status frontend.reponse
            if [[ "$(cat frontend.status)" =~ "200" ]]
            then
                echo "It Worked!"
                return 0
            else
                echo "!!! It failed!"
                return 1
            fi

  cloudfront-update:
    <<: *amazonImage
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd frontend
            yum install -y curl tar gzip
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - destroy-environment:
          workflow_id: "CIRCLE_WORKFLOW_ID:0:7"
      - revert-migrations:
          workflow_id: "CIRCLE_WORKFLOW_ID:0:7"   
  cleanup:
    <<: *amazonImage
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # Fetch the Old workflow ID
            export OldWorkflowID=$(aws cloudformation \
                    list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                    --no-paginate --output text)
            echo OldWorkflowID: "${OldWorkflowID}"
            echo CIRCLE_WORKFLOW_ID "${CIRCLE_WORKFLOW_ID:0:7}"
            # Fetch the stack names          
            export STACKS=($(aws cloudformation list-stacks --query "StackSummaries[*].StackName" \
                    --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}" 
      - run:
          name: Remove old stacks and files
          command: |
            # You can use any condition like:
            # if [[ "${OldWorkflowID}" =~ "${STACKS[@]}"  ]]
            # if [[ "${CIRCLE_WORKFLOW_ID:0:7}" =~ "${OldWorkflowID}" ]]
            if [[ "${CIRCLE_WORKFLOW_ID:0:7}" != "${OldWorkflowID}" ]]
            then
                echo "___________________________DELETE CONFIMED !________________________________"
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            else
                echo "___________________________CLEANUP SKIPPED :(________________________________"
                echo ""
                echo "Message:  There is nothing to clear..."
            fi
