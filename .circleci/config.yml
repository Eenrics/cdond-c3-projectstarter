version: 2.1

orbs:
  slack: circleci/slack@4.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID. 
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${<< parameters.workflow_id >>}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${<< parameters.workflow_id >>}
            aws cloudformation delete-stack --stack-name udapeople-backend-${<< parameters.workflow_id >>}
            aws s3 rm s3://udapeople-920252436563 --recursive
  revert-migrations:
    description: Revert the last migration with the given workflow ID.
    parameters:
      workflow_id:
        type: string
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/EB2xwfdGievAbEN38Tj81k/migration_${<< parameters.workflow_id >>})
            echo ${SUCCESS}
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi 
            echo "MIGRATION NOT REVERTED"
  notify-slack:
    description: Notify on slack everytime a job fails  
    steps:
      - slack/notify:
          channel: 'C04C9DU1SJ3'
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*Critical Job FAILED !!! *",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: fail

workflows:
  default:
    jobs:
      - smoke-test
            
nodeImage:  &nodeImage
  docker:
      - image: circleci/node:13.8.0
      
amazonImage:  &amazonImage
  docker:
      - image: amazon/aws-cli
      
ansibleImage:  &ansibleImage
  docker:
      - image: python:3.7-alpine3.11
      
alpineImage:  &alpineImage
  docker:
      - image: alpine:latest

jobs:
  test:
    <<: *ansibleImage
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["51:37:ad:d9:41:ca:0b:34:5f:da:d7:ec:62:1a:b9:e8"]
      - run:
          name: ls
          command: |
            cat ~/.ssh/id_rsa_5137add941ca0b345fdad7ec621ab9e8

  build-frontend:
    <<: *nodeImage
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    <<: *nodeImage
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    <<: *nodeImage
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test
  test-backend:
    <<: *nodeImage
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
    <<: *nodeImage
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end scan
          command: |
            cd frontend
            npm install
            npm audit fix --force
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            # npm install oauth-sign@^0.9.0
            # npm audit --audit-level=critical
  scan-backend:
    <<: *nodeImage
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm install
            npm audit fix --force
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            # npm install oauth-sign@^0.9.0
            # npm audit --audit-level=critical
  deploy-infrastructure:
    <<: *amazonImage
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum -y install tar gzip
      - run:
          name: Deploy Backend Infrastructure
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Deploy Frontend Infrastructure
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Extract IP Adresses
          command: |
            aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text >> kvdb.txt
      - run:
          name: Save Ip Address to KVDB
          command: |
            curl  -d $(cat kvdb.txt) https://kvdb.io/EB2xwfdGievAbEN38Tj81k/PublicIpAddress_i
      - destroy-environment:
          workflow_id: "CIRCLE_WORKFLOW_ID:0:7"
  configure-infrastructure:
    <<: *ansibleImage
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["51:37:ad:d9:41:ca:0b:34:5f:da:d7:ec:62:1a:b9:e8"]
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for curl kvdb
            apk update
            apk upgrade
            apk search curl
            apk add curl
            # install the dependencies needed for your playbook
            apk add --update ansible
            # install the dependencies needed for your aws cli
            pip install --upgrade pip
            pip install awscli
            apk add ansible
            # install the dependencies needed for your openssh
            apk search openssh
            apk add openssh
      - run:
          name: Retrieve Ip Address from KVDB
          command: |
            curl  -s https://kvdb.io/EB2xwfdGievAbEN38Tj81k/PublicIpAddress_i >> ./.circleci/ansible/inventory.txt
      - run:
          name: Check inventory file
          command: |
            cat .circleci/ansible/inventory.txt
            ls .circleci/ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible/
            ansible-playbook configure-server.yml -i inventory.txt
      - destroy-environment:
          workflow_id: "CIRCLE_WORKFLOW_ID:0:7"
  run-migrations:
    <<: *nodeImage
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            # Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send database migration status to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/EB2xwfdGievAbEN38Tj81k/migration_${CIRCLE_WORKFLOW_ID:0:7} -d '1'
            fi
      - destroy-environment:
          workflow_id: "CIRCLE_WORKFLOW_ID:0:7"
  deploy-frontend:
    <<: *amazonImage
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd frontend
            yum install -y curl tar gzip
            curl -sL https://rpm.nodesource.com/setup_10.x | bash -
            yum install -y nodejs
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -s https://kvdb.io/EB2xwfdGievAbEN38Tj81k/PublicIpAddress_i)
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow_id: "CIRCLE_WORKFLOW_ID:0:7"
      - revert-migrations:
          workflow_id: "CIRCLE_WORKFLOW_ID:0:7"
  deploy-backend:
    <<: *ansibleImage
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["51:37:ad:d9:41:ca:0b:34:5f:da:d7:ec:62:1a:b9:e8"]
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for curl kvdb
            apk update
            apk upgrade
            apk search curl
            apk add curl
            # install the dependencies needed for your playbook
            apk add --update ansible
            # install the dependencies needed for your aws cli
            pip install --upgrade pip
            pip install awscli
            apk add ansible
            # install the dependencies needed for your openssh
            apk search openssh
            apk add openssh
            # install the dependencies for node and npm
            apk update
            apk add --update nodejs npm nodejs-npm
            # install the dependencies for tar and gzip
            apk add --no-cache tar zip gzip
      - run:
          name: Retrieve Ip Address from KVDB
          command: |
            curl  -s https://kvdb.io/EB2xwfdGievAbEN38Tj81k/PublicIpAddress_i >> ./.circleci/ansible/inventory.txt
      - run:
          name: Check inventory file
          command: |
            cat .circleci/ansible/inventory.txt
            ls .circleci/ansible
      - run:
          name: Deploy backend
          command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: "CIRCLE_WORKFLOW_ID:0:7"
      - revert-migrations:
          workflow_id: "CIRCLE_WORKFLOW_ID:0:7"
  smoke-test:
    <<: *ansibleImage 
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for curl
            apk update
            apk upgrade
            apk search curl
            apk add curl
            # install the dependencies needed for your aws cli
            pip install --upgrade pip
            pip install awscli
            apk add ansible
            # install the dependencies for node and npm
            apk update
            apk add --update nodejs npm nodejs-npm
      - run:
          name: Get backend url
          command: |
            curl  -s https://kvdb.io/EB2xwfdGievAbEN38Tj81k/PublicIpAddress_i > BACKEND_IP_ADD.txt
            BACKEND_IP_SMOKE=$(cat BACKEND_IP_ADD.txt)
            export BACKEND_URL_SMOKE="https://${BACKEND_IP_SMOKE}:3030/api/status"
            echo $BACKEND_URL_SMOKE
      - run:
          name: Backend smoke test.
          command: |
            if curl ${BACKEND_URL_SMOKE} | grep "ok"
            then
                echo "It Worked!"
                return 1
            else
                echo "!!! It failed!"
                return 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
            echo ${URL} 
            if curl -s ${URL} | grep "Welcome"
            then
                echo "It Worked!"
                return 0
            else
                echo "!!! It failed!"
                return 1
            fi
      - destroy-environment:
          workflow_id: "CIRCLE_WORKFLOW_ID:0:7"
      - revert-migrations:
          workflow_id: "CIRCLE_WORKFLOW_ID:0:7"  

