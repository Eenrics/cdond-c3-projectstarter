version: 2.1


orbs:
  slack: circleci/slack@4.1

# Reusable Commands
commands:

  install_awscli:
    description: Install awscli
    steps:
      - run:
          name: Install aws cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            
  install_ansible:
    description: Install ansible
    steps:
      - run:
          name: Install ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
            
  install_nodejs:
    description: Install node v13.8.0
    steps:
      - run:
          name: Install nodejs v13.8.0
          command: |
            # Install Node.js LTS version as our base Node.js version
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs
            # Use n version manager to use Node.js v13.8.0
            sudo npm install --global n
            sudo n 13.8.0
            
  install_curl:
    description: Install curl
    steps:
      - run:
          name: Install curl
          command: |
            apk update
            apk upgrade
            apk search curl
            apk add curl
            
  install_openssh:
    description: Install openssh
    steps:
      - run:
          name: Install openssh
          command: |
            apk update
            apk upgrade
            apk search openssh
            apk add openssh  
            
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID. 
    parameters:
      workflow_id:
        type: string
        default: "CIRCLE_WORKFLOW_ID:0:7"
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            echo "Destroying environment started ...."
            aws s3 rm s3://udapeople-${<<parameters.workflow_id>>}/* --recursive
            aws s3 rb --force s3://udapeople-${<<parameters.workflow_id>>}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${<<parameters.workflow_id>>}
            aws cloudformation delete-stack --stack-name udapeople-backend-${<<parameters.workflow_id>>}
            echo "__________________________________ENV DESTROYED ______________________________________"
            
  revert-migrations:
    description: Revert the last migration with the given workflow ID.
    parameters:
      workflow_id:
        type: string
        default: "CIRCLE_WORKFLOW_ID:0:7"
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl https://kvdb.io/EB2xwfdGievAbEN38Tj81k/migrationStatus_s)
            echo ${SUCCESS}
            if (( "${SUCCESS}" == "1" ))
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
              echo "migration reverted successfully"
            else
              echo "MIGRATION NOT REVERTED"
            fi 
            echo "DONE !"
            
  notify-slack:
    description: Notify on slack everytime a job fails  
    steps:
      - slack/notify:
          channel: 'C04C9DU1SJ3'
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*Critical Job FAILED !!! *",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: fail


# Workflows
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]      
            

# Images for CICD

nodeImage:  &nodeImage
  docker:
      - image: cimg/node:13.8.0
      
amazonImage:  &amazonImage
  docker:
      - image: amazon/aws-cli
      
ansibleImage:  &ansibleImage
  docker:
      - image: python:3.7-alpine3.11

pythonImage:  &pythonImage
  docker:
      - image: cimg/python:3.11.1

pynodeImage:  &pynodeImage
  docker:
      - image: cimg/python:3.11.1-node
      
baseImage:  &baseImage
  docker:
      - image: cimg/base:stable


# Jobs
jobs:
  build-frontend:
    <<: *nodeImage
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps
          
  build-backend:
    <<: *nodeImage
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deps
          
  test-frontend:
    <<: *nodeImage
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test
            
  test-backend:
    <<: *nodeImage
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    <<: *nodeImage
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Front-end scan
          command: |
            cd frontend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
            
  scan-backend:
    <<: *nodeImage
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
            
  deploy-infrastructure:
    <<: *amazonImage
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum -y install tar gzip
      - run:
          name: Deploy Backend Infrastructure
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Deploy Frontend Infrastructure
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Extract IP Adresses
          command: |
            aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text >> kvdb.txt
      - run:
          name: Save Ip Address to KVDB
          command: |
            curl  -d $(cat kvdb.txt) https://kvdb.io/EB2xwfdGievAbEN38Tj81k/PublicIpAddress_i
      - destroy-environment:
          workflow_id: "CIRCLE_WORKFLOW_ID:0:7"
          
  configure-infrastructure:
    <<: *ansibleImage
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["cd:6b:51:76:5b:ac:da:2a:15:0c:15:5c:c2:c5:7f:5e"]
      - install_curl
      - install_openssh
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook and iac
            apk add --update ansible
            apk add ansible
            pip install --upgrade pip
            pip install awscli
      - run:
          name: Retrieve Ip Address from KVDB
          command: |
            curl  -s https://kvdb.io/EB2xwfdGievAbEN38Tj81k/PublicIpAddress_i >> ./.circleci/ansible/inventory.txt
      - run:
          name: Check inventory file
          command: |
            cat .circleci/ansible/inventory.txt
            ls .circleci/ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible/
            ansible-playbook configure-server.yml -i inventory.txt
      - destroy-environment:
          workflow_id: "CIRCLE_WORKFLOW_ID:0:7"

  run-migrations:
    <<: *nodeImage
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - install_awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
      - run:
          name: Send database migration status to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              sudo apt install curl -y
              curl https://kvdb.io/EB2xwfdGievAbEN38Tj81k/migrationStatus_s -d '1'
              echo "migrated successfully"
            else
              curl https://kvdb.io/EB2xwfdGievAbEN38Tj81k/migrationStatus_s -d '0'
              echo "migration failed"
            fi
      - destroy-environment:
          workflow_id: "CIRCLE_WORKFLOW_ID:0:7"

  deploy-frontend:
    <<: *baseImage
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - install_awscli
      - install_nodejs
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_IP=$(curl -s https://kvdb.io/EB2xwfdGievAbEN38Tj81k/PublicIpAddress_i)
            echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: build frontend
          command: |
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment:
          workflow_id: "CIRCLE_WORKFLOW_ID:0:7"
      - revert-migrations:
          workflow_id: "CIRCLE_WORKFLOW_ID:0:7"

  deploy-backend:
    <<: *baseImage
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - install_awscli
      - install_ansible
      - install_nodejs
      - add_ssh_keys:
          fingerprints: ["cd:6b:51:76:5b:ac:da:2a:15:0c:15:5c:c2:c5:7f:5e"]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Retrieve Ip Address from KVDB
          command: |
            curl  -s https://kvdb.io/EB2xwfdGievAbEN38Tj81k/PublicIpAddress_i >> ./.circleci/ansible/inventory.txt
      - run:
          name: Check inventory file
          command: |
            cat .circleci/ansible/inventory.txt
            ls .circleci/ansible
      - run:
          name: Package Backend
          command: |
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*
            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment:
          workflow_id: "CIRCLE_WORKFLOW_ID:0:7"
      - revert-migrations:
          workflow_id: "CIRCLE_WORKFLOW_ID:0:7"

  smoke-test:
    <<: *baseImage
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Backend smoke test.
          command: |
            # Get BACKEND URL
            curl  -s https://kvdb.io/EB2xwfdGievAbEN38Tj81k/PublicIpAddress_i > BACKEND_IP_ADD.txt
            BACKEND_IP_SMOKE=$(cat BACKEND_IP_ADD.txt)
            export BACKEND_URL_SMOKE="http://${BACKEND_IP_SMOKE}:3030/api/status"
            echo $BACKEND_URL_SMOKE
            # Test BACKEND SERVER API
            if (curl -s $BACKEND_URL_SMOKE | grep "ok")
            then
              echo "It Worked"
              exit 1
            else
              echo "It Failed"
              exit 1
            fi
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_URL_SMOKE="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"
            echo ${FRONTEND_URL_SMOKE}
            curl  -s "${FRONTEND_URL_SMOKE}" > frontend.reponse
            curl  -sI "${FRONTEND_URL_SMOKE}" > frontend.status
            cat frontend.status frontend.reponse
            if [[ "$(cat frontend.status)" =~ "200" ]]
            then
                echo "It Worked!"
                exit 0
            else
                echo "!!! It Failed!"
                exit 1
            fi
      - destroy-environment:
          workflow_id: "CIRCLE_WORKFLOW_ID:0:7"
      - revert-migrations:
          workflow_id: "CIRCLE_WORKFLOW_ID:0:7"
          
  cloudfront-update:
    <<: *baseImage
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name InitialStack \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --tags project=udapeople
      - destroy-environment:
          workflow_id: "CIRCLE_WORKFLOW_ID:0:7"
      - revert-migrations:
          workflow_id: "CIRCLE_WORKFLOW_ID:0:7"

  cleanup:
    <<: *amazonImage
    steps:
      - checkout
      - run:
          name: Get all bucket and deleting old buckets
          command: |
            # GET BUCKETS
            aws s3 ls > s3.lists

            # PUT BUCKETS INTO ARRAY VARIABLE
            BUCKET_LISTS=$(cat s3.lists | sed  's/^.*\(udapeople-.*\)$/\1/g' | tr " " "\n")
            
            # GET OLD WORKFLOW ID
            export OldWorkflowID=$(curl  -s https://kvdb.io/EB2xwfdGievAbEN38Tj81k/OldStackId_i)
            echo Old Workflow ID: $OldWorkflowID
            
            # ITERATE THROUGH BUCKETS
            for BUCKET in $BUCKET_LISTS; do (if [[ "$BUCKET" == "udapeople-${OldWorkflowID}" ]]; then echo "... DELETING BUCKET $BUCKET"; aws s3 rm "s3://${BUCKET}" --recursive; aws s3 rb --force "s3://${BUCKET}"; else echo "... MOVING TO THE NEXT BUCKET"; fi;); done
      - run:
          name: Get all stack and deleting old stacks
          command: |
            # GET STACKS
            #OldWorkflowID=$(curl  -s https://kvdb.io/EB2xwfdGievAbEN38Tj81k/OldStackId_i)
            #echo $OldWorkflowID
            export STACKS=($(aws cloudformation list-stacks \
                --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
            export OldWorkflowID=$(curl  -s https://kvdb.io/EB2xwfdGievAbEN38Tj81k/OldStackId_i)
            echo Old Workflow ID: $OldWorkflowID 
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
                echo "___________________________DELETE CONFIMED !________________________________"
                aws cloudformation delete-stack --stack-name udapeople-backend-${OldWorkflowID}
                echo "deleting backend cloudformation stack with id ${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name udapeople-frontend-${OldWorkflowID}
                echo "deleting backend cloudformation stack with id ${OldWorkflowID}"
                echo "           _________________CLEANUP COMP_________________                  "
                echo "                     :) Enjoy updated app                                  "
            else
                echo "___________________________CLEANUP SKIPPED :(________________________________"
                echo ""
                echo "               Message:  There is nothing to clear...                        "
            fi
            # Update Old Id
            curl  -d $(echo ${CIRCLE_WORKFLOW_ID:0:7}) -s https://kvdb.io/EB2xwfdGievAbEN38Tj81k/OldStackId_i
     
