version: 2.1


orbs:
  slack: circleci/slack@4.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID. 
    parameters:
      id:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${<< parameters.id >>}
  notify-slack:
    description: Notify on slack everytime a job fails  
    steps:
      - slack/notify:
          channel: 'C04C9DU1SJ3'
          custom: |
            {
              "blocks": [
                {
                  "type": "section",
                  "fields": [
                    {
                      "type": "plain_text",
                      "text": "*Critical Job FAILED !!! *",
                      "emoji": true
                    }
                  ]
                }
              ]
            }
          event: fail

workflows:
  default:
    jobs:
      - test
      - deploy-infrastructure
      - configure-infrastructure:
          requires: [deploy-infrastructure]
            
nodeImage:  &nodeImage
  docker:
      - image: circleci/node:13.8.0
      
amazonImage:  &amazonImage
  docker:
      - image: amazon/aws-cli
      
ansibleImage:  &ansibleImage
  docker:
      - image: python:3.7-alpine3.11

jobs:
  test:
    <<: *ansibleImage
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["51:37:ad:d9:41:ca:0b:34:5f:da:d7:ec:62:1a:b9:e8"]
      - run:
          name: ls
          command: |
            cat ~/.ssh/id_rsa_5137add941ca0b345fdad7ec621ab9e8

  build-frontend:
    <<: *nodeImage
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
  build-backend:
    <<: *nodeImage
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
  test-frontend:
    <<: *nodeImage
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end test
          command: |
            cd frontend
            npm install
            npm run test
  test-backend:
    <<: *nodeImage
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end test
          command: |
            cd backend
            npm install
            npm run test
  scan-frontend:
    <<: *nodeImage
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Front-end scan
          command: |
            cd frontend
            npm install
            npm audit fix --force
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            # npm install oauth-sign@^0.9.0
            # npm audit --audit-level=critical
  scan-backend:
    <<: *nodeImage
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end scan
          command: |
            cd backend
            npm install
            npm audit fix --force
            npm audit fix --audit-level=critical --force
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            # npm install oauth-sign@^0.9.0
            # npm audit --audit-level=critical
  deploy-infrastructure:
    <<: *amazonImage
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum -y install tar gzip
      - run:
          name: Deploy Backend Infrastructure
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Deploy Frontend Infrastructure
          command: |
            aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
                --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
                --tags project=udapeople
      - run:
          name: Extract IP Adresses
          command: |
            echo "[web]" > inventory.txt
            aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --output text >> inventory.txt
      - save_cache:
          paths: [inventory.txt]
          key: inventory-file
      - destroy-environment:
          id: "CIRCLE_WORKFLOW_ID:0:7"
  configure-infrastructure:
    <<: *ansibleImage
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["51:37:ad:d9:41:ca:0b:34:5f:da:d7:ec:62:1a:b9:e8"]
      - restore_cache:
          keys: [inventory-file]
      - run:
          name: mv inventory file to the right place
          command: |
            # move inventory files
            rm .circleci/ansible/inventory.txt
            mv inventory.txt .circleci/ansible/inventory.txt
            cat .circleci/ansible/inventory.txt
            ls
            ls ~
      - run:
          name: Install dependencies
          command: |
            # install the dependencies needed for your playbook
            apk add --update ansible
      - run:
          name: Configure server
          command: |
            cd .circleci/ansible/
            cp ~/.ssh/id_rsa_5137add941ca0b345fdad7ec621ab9e8 ./udacity.pem
            cat inventory.txt
            chmod 400 udacity.pem
            ansible-playbook -i inventory.txt configure-server.yml --private-key ./udacity.pem
